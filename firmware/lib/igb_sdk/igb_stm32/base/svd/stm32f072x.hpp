// Generated by svd_parser.rb. Dont't edit please.
#ifndef IGB_STM32_DEVICE_SVD_STM32F072X_H
#define IGB_STM32_DEVICE_SVD_STM32F072X_H

#include <igb_stm32/base.hpp>
#include <array>

#define STM32_PERIPHGRP_CRC_EXISTS 1
#define STM32_PERIPH_CRC_EXISTS 1
#define STM32_PERIPHGRP_GPIO_EXISTS 1
#define STM32_PERIPH_GPIOF_EXISTS 1
#define STM32_PERIPH_GPIOD_EXISTS 1
#define STM32_PERIPH_GPIOC_EXISTS 1
#define STM32_PERIPH_GPIOB_EXISTS 1
#define STM32_PERIPH_GPIOE_EXISTS 1
#define STM32_PERIPH_GPIOA_EXISTS 1
#define STM32_PERIPHGRP_SPI_EXISTS 1
#define STM32_PERIPH_SPI1_EXISTS 1
#define STM32_PERIPH_SPI2_EXISTS 1
#define STM32_PERIPHGRP_DAC_EXISTS 1
#define STM32_PERIPH_DAC_EXISTS 1
#define STM32_PERIPHGRP_PWR_EXISTS 1
#define STM32_PERIPH_PWR_EXISTS 1
#define STM32_PERIPHGRP_I2C_EXISTS 1
#define STM32_PERIPH_I2C1_EXISTS 1
#define STM32_PERIPH_I2C2_EXISTS 1
#define STM32_PERIPHGRP_IWDG_EXISTS 1
#define STM32_PERIPH_IWDG_EXISTS 1
#define STM32_PERIPHGRP_WWDG_EXISTS 1
#define STM32_PERIPH_WWDG_EXISTS 1
#define STM32_PERIPHGRP_TIM_EXISTS 1
#define STM32_PERIPH_TIM1_EXISTS 1
#define STM32_PERIPH_TIM2_EXISTS 1
#define STM32_PERIPH_TIM3_EXISTS 1
#define STM32_PERIPH_TIM14_EXISTS 1
#define STM32_PERIPH_TIM6_EXISTS 1
#define STM32_PERIPH_TIM7_EXISTS 1
#define STM32_PERIPH_TIM15_EXISTS 1
#define STM32_PERIPH_TIM16_EXISTS 1
#define STM32_PERIPH_TIM17_EXISTS 1
#define STM32_PERIPHGRP_EXTI_EXISTS 1
#define STM32_PERIPH_EXTI_EXISTS 1
#define STM32_PERIPHGRP_NVIC_EXISTS 1
#define STM32_PERIPH_NVIC_EXISTS 1
#define STM32_PERIPHGRP_DMA_EXISTS 1
#define STM32_PERIPH_DMA_EXISTS 1
#define STM32_PERIPHGRP_RCC_EXISTS 1
#define STM32_PERIPH_RCC_EXISTS 1
#define STM32_PERIPHGRP_SYSCFG_EXISTS 1
#define STM32_PERIPH_SYSCFG_EXISTS 1
#define STM32_PERIPHGRP_ADC_EXISTS 1
#define STM32_PERIPH_ADC_EXISTS 1
#define STM32_PERIPHGRP_USART_EXISTS 1
#define STM32_PERIPH_USART1_EXISTS 1
#define STM32_PERIPH_USART2_EXISTS 1
#define STM32_PERIPH_USART3_EXISTS 1
#define STM32_PERIPH_USART4_EXISTS 1
#define STM32_PERIPHGRP_COMP_EXISTS 1
#define STM32_PERIPH_COMP_EXISTS 1
#define STM32_PERIPHGRP_RTC_EXISTS 1
#define STM32_PERIPH_RTC_EXISTS 1
#define STM32_PERIPHGRP_TSC_EXISTS 1
#define STM32_PERIPH_TSC_EXISTS 1
#define STM32_PERIPHGRP_CEC_EXISTS 1
#define STM32_PERIPH_CEC_EXISTS 1
#define STM32_PERIPHGRP_FLASH_EXISTS 1
#define STM32_PERIPH_FLASH_EXISTS 1
#define STM32_PERIPHGRP_DBGMCU_EXISTS 1
#define STM32_PERIPH_DBGMCU_EXISTS 1
#define STM32_PERIPHGRP_USB_EXISTS 1
#define STM32_PERIPH_USB_EXISTS 1
#define STM32_PERIPHGRP_CRS_EXISTS 1
#define STM32_PERIPH_CRS_EXISTS 1
#define STM32_PERIPHGRP_CAN_EXISTS 1
#define STM32_PERIPH_CAN_EXISTS 1

#include <igb_stm32/base/info.hpp>

namespace igb_stm32 {

const struct PeripheralInfo {
  const std::array<GPIOInfo, 6> gpio {
    GPIOInfo {
      .p_gpio = GPIOA,
    },
    GPIOInfo {
      .p_gpio = GPIOB,
    },
    GPIOInfo {
      .p_gpio = GPIOC,
    },
    GPIOInfo {
      .p_gpio = GPIOD,
    },
    GPIOInfo {
      .p_gpio = GPIOE,
    },
    GPIOInfo {
      .p_gpio = GPIOF,
    },
  };
  const std::array<SPIInfo, 2> spi {
    SPIInfo {
      .p_spi = SPI1,
    },
    SPIInfo {
      .p_spi = SPI2,
    },
  };
  const std::array<DACInfo, 1> dac {
    DACInfo {
      .p_dac = DAC,
    },
  };
  const std::array<I2CInfo, 2> i2c {
    I2CInfo {
      .p_i2c = I2C1,
    },
    I2CInfo {
      .p_i2c = I2C2,
    },
  };
  const std::array<TIMInfo, 9> tim {
    TIMInfo {
      .type = TIMType::ADVANCED,
      .p_tim = TIM1,
    },
    TIMInfo {
      .type = TIMType::GENERAL,
      .p_tim = TIM2,
    },
    TIMInfo {
      .type = TIMType::GENERAL,
      .p_tim = TIM3,
    },
    TIMInfo {
      .type = TIMType::BASIC,
      .p_tim = TIM6,
    },
    TIMInfo {
      .type = TIMType::BASIC,
      .p_tim = TIM7,
    },
    TIMInfo {
      .type = TIMType::GENERAL,
      .p_tim = TIM14,
    },
    TIMInfo {
      .type = TIMType::GENERAL,
      .p_tim = TIM15,
    },
    TIMInfo {
      .type = TIMType::GENERAL,
      .p_tim = TIM16,
    },
    TIMInfo {
      .type = TIMType::GENERAL,
      .p_tim = TIM17,
    },
  };
  const RCCInfo rcc {
    .p_rcc = RCC,
  };
  const std::array<USARTInfo, 4> usart {
    USARTInfo {
      .p_usart = USART1,
    },
    USARTInfo {
      .p_usart = USART2,
    },
    USARTInfo {
      .p_usart = USART3,
    },
    USARTInfo {
      .p_usart = USART4,
    },
  };
} PERIPHERAL_INFO;

}

#endif /* IGB_STM32_DEVICE_SVD_STM32F072X_H */
